Асинхронный ввод-вывод — это просто разновидность обработки ввода-вывода, при которой еще до з
авершения записи или считывания может выполняться другое действие.
поддерживается обработка файлов и сокетов на уровне операционной системы

Рассмотрим простой практический пример. Нужно записать 100 Гбайт данных в файловую систему или сетевой сокет.
В предыдущих версиях Java вам пришлось бы вручную писать многопоточный код (с использованием конструкций java.util.concurrent).
Так мы смогли бы одновременно записывать информацию в несколько областей этого файла или сокета. Кроме того, не существовало
простой возможности одновременно считывать информацию из нескольких частей файла. Опять же, если вы только не написали
вручную какой-то умный код, основной поток блокировался при операциях ввода-вывода. Таким образом, приходилось дожидаться
завершения операции ввода-вывода, которая могла протекать очень долго, и лишь потом возвращаться к выполнению основной работы.

В Java 7 появилось три новых асинхронных канала, на которые следует обратить внимание:
??AsynchronousFileChannel — для файлового ввода-вывода;
??AsynchronousSocketChannel — для сокетного ввода-вывода, поддерживает задержки;
??AsynchronousServerSocketChannel — для асинхронных сокетов, принимающих соединения.

Существуют две основные парадигмы (стиля) использования новых API асинхронного ввода-вывода:
    парадигма Future (с ожиданием) и парадигма Callback (обратный вызов).

Стиль с ожиданием (Future style) — термин, предложенный самими разработчиками API NIO.2. Он указывает на использование
нтерфейса java.util.concurrent.Future. Как правило, стиль асинхронной обработки с ожиданием применяется в тех случаях,
когда вы хотите, чтобы главный поток управления инициировал ввод-вывод, а потом собирал результаты ввода-вывода в ходе опроса.
При стиле с ожиданием используется известная техника java.util.concurrent. В таком случае объявляется объект Future,
в котором будет храниться результат вашей асинхронной операции. Самое важное — это означает, что работа вашего актуального
потока не будет тормозиться из-за потенциально медленной операции ввода-вывода. Напротив, операция ввода-вывода инициируется в отдельном потоке.
По завершении операции возвращается ее результат. Тем временем ваш основной поток может и далее заниматься выполнением других
задач, если это необходимо. Когда эти прочие задачи будут завершены, основной поток дождется завершения операции ввода-вывода
и потом продолжит работу.